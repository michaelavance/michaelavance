# Verify the column has been added
head(EC_cells@meta.data)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
pseudobulk_counts <- pseudobulk_counts$RNA
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
remove(colData)
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
colData <- data.frame(
samples = colnames(pseudobulk_counts)
)
# Assign groups based on sample names
colData <- colData %>%
mutate(group = case_when(
samples %in% c("A1td", "A3td", "A4td") ~ "AGED",
samples %in% c("A5tdA", "A6tdA", "A7tdA", "A8tdA") ~ "AGEDABT",
samples %in% c("Y2td", "Y3td", "Y5td") ~ "YOUNG"
))
view(Coldata)
view(colData)
# Set row names to be the sample names
rownames(colData) <- colData$samples
colData$samples <- NULL  # Remove the samples column as it's now the row names
# Verify the structure of colData
print(colData)
# Step 1: Filter for cell type "EC"
View(TidyDatCellTypes@meta.data)
EC_cells <- subset(TidyDatCellTypes, subset=cell_types=="EC")
# Step 2: Create pseudobulk samples
# Add pseudobulk_sample column to metadata
EC_cells@meta.data$pseudobulk_sample <- paste(EC_cells@meta.data$group, EC_cells@meta.data$ID)
# Verify the column has been added
head(EC_cells@meta.data)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
pseudobulk_counts <- pseudobulk_counts$RNA
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
colData <- data.frame(
samples = colnames(pseudobulk_counts)
)
# Assign groups based on sample names
colData <- colData %>%
mutate(group = case_when(
samples %in% c("A1td", "A3td", "A4td") ~ "AGED",
samples %in% c("A5tdA", "A6tdA", "A7tdA", "A8tdA") ~ "AGEDABT",
samples %in% c("Y2td", "Y3td", "Y5td") ~ "YOUNG"
))
# Set row names to be the sample names
rownames(colData) <- colData$samples
colData$samples <- NULL  # Remove the samples column as it's now the row names
# Verify the structure of colData
print(colData)
# Create a metadata dataframe
metadata <- EC_cells@meta.data
# Add a column for pseudobulk sample names
metadata$pseudobulk_sample <- paste(metadata$group,metadata$ID, sep = "_")
View(metadata)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(object=EC_cells, group.by = "pseudobulk_sample", assays = "RNA", slot = "counts")
pseudobulk_counts <- pseudobulk_counts$RNA
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
colData <- data.frame(
group = sapply(strsplit(colnames(group), "_"), `[`, 1)
)
# Step 1: Filter for cell type "EC"
View(TidyDatCellTypes@meta.data)
EC_cells <- subset(TidyDatCellTypes, subset=cell_types=="EC")
EC_cells <- subset(TidyDatCellTypes, subset=cell_types=="EC")
# Step 2: Create pseudobulk samples
# Add pseudobulk_sample column to metadata
EC_cells@meta.data$pseudobulk_sample <- paste(EC_cells@meta.data$group, EC_cells@meta.data$ID)
# Verify the column has been added
head(EC_cells@meta.data)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
pseudobulk_counts <- pseudobulk_counts$RNA
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
colData <- data.frame(
samples = colnames(pseudobulk_counts)
)
# Set row names to be the sample names
rownames(colData) <- colData$samples
# Set row names to be the sample names
rownames(colData) <- colData$samples
colData$samples <- NULL  # Remove the samples column as it's now the row names
# Verify the structure of colData
print(colData)
# Step 1: Filter for cell type "EC"
EC_cells <- subset(TidyDatCellTypes, subset=cell_types=="EC")
# Step 1: Filter for cell type "EC"
EC_cells <- subset(TidyDatCellTypes, subset=cell_types=="EC")
# Step 2: Create pseudobulk samples
# Add pseudobulk_sample column to metadata
EC_cells@meta.data$pseudobulk_sample <- paste(EC_cells@meta.data$group, EC_cells@meta.data$ID, sep = "_")
# Verify the column has been added
head(EC_cells@meta.data)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
pseudobulk_counts <- pseudobulk_counts$RNA
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
colData <- data.frame(
samples = colnames(pseudobulk_counts)
)
# Print sample names to verify them
print(colData$samples)
# Assign groups based on sample names
colData <- colData %>%
mutate(group = case_when(
samples %in% c("AGED-A1td", "AGED-A3td", "AGED-A4td") ~ "AGED",
samples %in% c("AGEDABT-A5tdA", "AGEDABT-A6tdA", "AGEDABT-A7tdA", "AGEDABT-A8tdA") ~ "AGEDABT",
samples %in% c("YOUNG-Y2td", "YOUNG-Y3td", "YOUNG-Y5td") ~ "YOUNG"
))
# Set row names to be the sample names
rownames(colData) <- colData$samples
colData$samples <- NULL  # Remove the samples column as it's now the row names
# Verify the structure of colData
print(colData)
# Assign groups based on sample names
colData <- colData %>%
mutate(group = case_when(
samples %in% c("AGED-A1td", "AGED-A3td", "AGED-A4td","AGED-A5td") ~ "AGED",
samples %in% c("AGEDABT-A5tdA", "AGEDABT-A6tdA", "AGEDABT-A7tdA", "AGEDABT-A8tdA") ~ "AGEDABT",
samples %in% c("YOUNG-Y2td", "YOUNG-Y3td", "YOUNG-Y5td") ~ "YOUNG"
))
# Step 1: Filter for cell type "EC"
EC_cells <- subset(TidyDatCellTypes, subset=cell_types=="EC")
# Step 2: Create pseudobulk samples
# Add pseudobulk_sample column to metadata
EC_cells@meta.data$pseudobulk_sample <- paste(EC_cells@meta.data$group, EC_cells@meta.data$ID, sep = "_")
# Verify the column has been added
head(EC_cells@meta.data)
# Aggregate counts by pseudobulk sample
pseudobulk_counts <- AggregateExpression(
object = EC_cells,
group.by = "pseudobulk_sample",
assays = "RNA",
slot = "counts"
)
pseudobulk_counts <- pseudobulk_counts$RNA
# Step 3: Prepare data for DESeq2
# Create a dataframe for DESeq2 colData
colData <- data.frame(
samples = colnames(pseudobulk_counts)
)
# Print sample names to verify them
print(colData$samples)
# Assign groups based on sample names
colData <- colData %>%
mutate(group = case_when(
samples %in% c("AGED-A1td", "AGED-A3td", "AGED-A4td","AGED-A5td") ~ "AGED",
samples %in% c("AGEDABT-A5tdA", "AGEDABT-A6tdA", "AGEDABT-A7tdA", "AGEDABT-A8tdA") ~ "AGEDABT",
samples %in% c("YOUNG-Y2td", "YOUNG-Y3td", "YOUNG-Y5td") ~ "YOUNG"
))
# Set row names to be the sample names
rownames(colData) <- colData$samples
colData$samples <- NULL  # Remove the samples column as it's now the row names
# Verify the structure of colData
print(colData)
# Create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = pseudobulk_counts, colData = colData, design = ~ group)
# Step 4: Perform differential expression analysis
# Run DESeq2
dds <- DESeq(dds)
# Perform comparisons
results_YOUNG_vs_AGED <- results(dds, contrast = c("group", "YOUNG", "AGED"))
results_AGED_vs_AGEDABT <- results(dds, contrast = c("group", "AGED", "AGEDABT"))
results_YOUNG_vs_AGEDABT <- results(dds, contrast = c("group", "YOUNG", "AGEDABT"))
# Step 5: View results
# View results for each comparison
head(results_YOUNG_vs_AGED)
head(results_AGED_vs_AGEDABT)
head(results_YOUNG_vs_AGEDABT)
# Step 4: Perform variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
# Step 5: Extract PCA data
pcaData <- plotPCA(vsd, intgroup = "group", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
# Step 6: Plot the PCA
ggplot(pcaData, aes(x = PC1, y = PC2, color = group)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
ggtitle("PCA of Pseudobulk Samples")
library(SeuratObject)
library(Seurat)
library(ggplot2)
library(DoubletFinder)
library(Rcpp)
library(harmony)
library(fastmap)
library(SeuratData)
library(caTools)
library(devtools)
library(remotes)
library(batchelor)
library(R.utils)
library(SeuratWrappers)
library(BiocManager)
library(sctransform)
library(glmGamPoi)
library(scDblFinder)
library(dplyr)
library(patchwork)
library(DESeq2)
library(data.table)
library(magrittr)
library(presto)
library(SeuratObject)
library(Seurat)
library(ggplot2)
library(DoubletFinder)
library(Rcpp)
library(harmony)
library(fastmap)
library(SeuratData)
library(caTools)
library(devtools)
library(remotes)
library(batchelor)
library(R.utils)
library(SeuratWrappers)
library(BiocManager)
library(sctransform)
library(glmGamPoi)
library(scDblFinder)
library(dplyr)
library(patchwork)
library(DESeq2)
library(data.table)
library(magrittr)
library(presto)
TidyDat2CellTypes <- readRDS("Z:/Experiments-CL2/RNAseq/VSMC scRNAseq 092024/scRNAseq analysis CAH 2025/Annotation and Abundance/TidyDat2CellTypes.rds")
TidyDat2CellTypes <- readRDS("Z:/Experiments-CL2/RNAseq/VSMC scRNAseq 092024/scRNAseq analysis CAH 2025/Annotation and Abundance/TidyDat2CellTypes.rds")
#If a function required layers to be joined you can do that with the following line. Just be sure to change the object to the _joined one and not the original.
TidyDat2CellTypes_joined <- JoinLayers(TidyDat2CellTypes)
TidyDat2CellTypes@meta.data
# Find all markers
all.markers <- FindAllMarkers(TidyDat2CellTypes_joined,only.pos = TRUE,min.pct = 0.25,logfc.threshold = 0.25,group.by = "cell_types")
# Get top 10 markers per cluster
colnames(all.markers)
# Get top 10 markers per cluster
top10 <- all.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC)
# Create heatmap
DoHeatmap(TidyDat2CellTypes_joined, features = top10$gene) +
theme(axis.text.y = element_text(size = 6))
# Get top 10 markers per cluster
top10 <- all.markers %>%
group_by(cell_types) %>%
top_n(n = 10, wt = avg_log2FC)
# Find all markers
all.markers <- FindAllMarkers(TidyDat2CellTypes_joined,only.pos = TRUE,min.pct = 0.25,logfc.threshold = 0.25,group.by = "cell_types")
View(all.markers)
View(all.markers)
View(all.markers)
# Create heatmap
DoHeatmap(all.markers, features = top10$gene) +
theme(axis.text.y = element_text(size = 6))
# Create heatmap
DoHeatmap(TidyDat2CellTypes_joined, features = top10$gene,group.by = "cell_types") +
theme(axis.text.y = element_text(size = 6))
ggsave("Z:/Experiments-CL2/RNAseq/VSMC scRNAseq 092024/scRNAseq analysis CAH 2025/Annotation and Abundance/Top 20 for Marisa/EC_BBB_permeability_only_VSMCs.png", width = 25, height = 15)
ggsave("Z:/Experiments-CL2/RNAseq/VSMC scRNAseq 092024/scRNAseq analysis CAH 2025/Annotation and Abundance/Top 20 for Marisa/TOP10HEATMAPCELLTYPES.png", width = 25, height = 15)
# Find all markers
all.markers <- FindAllMarkers(TidyDat2CellTypes_joined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
# Find all markers
all.markers <- FindAllMarkers(TidyDat2CellTypes_joined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
# Get top 10 markers per cluster
top10 <- all.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC)
# Create heatmap
DoHeatmap(TidyDat2CellTypes_joined, features = top10$gene) +
theme(axis.text.y = element_text(size = 6))
# Create heatmap
DoHeatmap(TidyDat2CellTypes_joined, features = top10$gene) +
theme(axis.text.y = element_text(size = 6))
ggsave("Z:/Experiments-CL2/RNAseq/VSMC scRNAseq 092024/scRNAseq analysis CAH 2025/Annotation and Abundance/Top 20 for Marisa/TOP10HEATMAPCLUSTERS.png", width = 35, height = 15)
ggsave("Z:/Experiments-CL2/RNAseq/VSMC scRNAseq 092024/scRNAseq analysis CAH 2025/Annotation and Abundance/Top 20 for Marisa/TOP10HEATMAPCLUSTERS.png", width = 45, height = 15)
#render is how you create html
plot(1:10)
#render is how you create html
plot(1:10)
library(palmerpenguins)
library(palmerpenguins)
#| label: load-packages
#| include: false
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
#| label: load-packages
#| include: false
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
data <- penguins
glimpse(penguins)
head(penguins)
penguins |>
dplyr::select(where(is.factor)) |>
glimpse()
# Count penguins for each species / island
penguins %>%
count(species, island, .drop = FALSE)
table(penguins$species, penguins$island)
# Count penguins for each species / island
penguins %>%
count(species, island, .drop = FALSE)
table(penguins$species, penguins$island)
# Count penguins for each species / island
penguins %>%
count(species, island, .drop = FALSE)
table(penguins$species, penguins$island)
#| label: plot-island-distribution
#| fig-width: 8
#| fig-height: 4
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(alpha = 0.8) +
scale_fill_manual(values = c("darkorange","purple","cyan4")) +
theme_minimal() +
facet_wrap(~species, ncol = 1) +
coord_flip()
# Count penguins for each species / sex
penguins |>
count(species, sex, .drop = FALSE)
#| label: plot-sex-distribution
#| fig-width: 8
#| fig-height: 4
ggplot(penguins, aes(x = sex, fill = species)) +
geom_bar(alpha = 0.8) +
scale_fill_manual(values = c("darkorange","purple","cyan4"),
guide = FALSE) +
theme_minimal() +
facet_wrap(~species, ncol = 1) +
coord_flip()
penguins |>
dplyr::select(where(is.numeric)) |>
glimpse()
# Count how many penguins they evaluated each year
penguins |>
count(year, species, .drop = FALSE)
table(penguins$year, penguins$species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
penguins |>
dplyr::select(where(is.numeric)) |>
glimpse()
# Count how many penguins they evaluated each year
penguins |>
count(year, species, .drop = FALSE)
table(penguins$year, penguins$species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
# Scatterplot example 1: penguin flipper length versus body mass
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species,
shape = species),
size = 2) +
scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
# Scatterplot example 2: penguin bill length versus bill depth
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
geom_point(aes(color = species,
shape = species),
size = 2)  +
scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
# Scatterplot example 3: penguin flipper length versus body mass separated by species and sex
ggplot(penguins, aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(aes(color = sex)) +
scale_color_manual(values = c("deeppink2","cornflowerblue"),
na.translate = FALSE) + # removes the "NA" values
facet_wrap(~species)
# Scatterplot example 4: penguin flipper length versus body mass separated by all 3 factor variables
ggplot(penguins, aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(aes(color = sex, shape = island)) +
scale_color_manual(values = c("deeppink2","cornflowerblue"),
na.translate = FALSE) + # removes the "NA" values
facet_wrap(~species)
# Jitter plot example: bill length by species
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) +
geom_jitter(aes(color = species),
width = 0.1,
alpha = 0.7,
show.legend = FALSE) +
scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
# Boxplot examples: bill length by species
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_boxplot(aes(fill = species)) +
scale_fill_manual(values = c("orange","orchid","cyan3"))
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) +
geom_boxplot(aes(fill = species), outlier.shape = NA, na.rm = TRUE) +
geom_jitter(aes(color = species),
width = 0.1,
alpha = 0.7, na.rm = TRUE,
show.legend = FALSE) +
scale_color_manual(values = c("darkorange2","darkorchid","cyan4")) +
scale_fill_manual(values = c("orange","orchid","cyan3"))
# Histogram example: flipper length by species
ggplot(data = penguins, aes(x = flipper_length_mm)) +
geom_histogram(aes(fill = species), alpha = 0.5, position = "identity", na.rm = TRUE) +
scale_fill_manual(values = c("darkorange","darkorchid","cyan4"))
#| label: penguin-pairs
#| fig-width: 8
#| fig-height: 7
penguins |>
select(species, body_mass_g, ends_with("_mm")) |>
GGally::ggpairs(aes(color = species)) +
scale_colour_manual(values = c("darkorange","purple","cyan4")) +
scale_fill_manual(values = c("darkorange","purple","cyan4"))
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
# Count how many penguins they evaluated each year
penguins |>
count(year, species, .drop = FALSE)
table(penguins$year, penguins$species)
# Scatterplot example 1: penguin flipper length versus body mass
ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species,
shape = species),
size = 2) +
scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
# Scatterplot example 2: penguin bill length versus bill depth
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
geom_point(aes(color = species,
shape = species),
size = 2)  +
scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
# Scatterplot example 3: penguin flipper length versus body mass separated by species and sex
ggplot(penguins, aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(aes(color = sex)) +
scale_color_manual(values = c("deeppink2","cornflowerblue"),
na.translate = FALSE) + # removes the "NA" values
facet_wrap(~species)
# Scatterplot example 4: penguin flipper length versus body mass separated by all 3 factor variables
ggplot(penguins, aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(aes(color = sex, shape = island)) +
scale_color_manual(values = c("deeppink2","cornflowerblue"),
na.translate = FALSE) + # removes the "NA" values
facet_wrap(~species)
# Jitter plot example: bill length by species
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) +
geom_jitter(aes(color = species),
width = 0.1,
alpha = 0.7,
show.legend = FALSE) +
scale_color_manual(values = c("darkorange","darkorchid","cyan4"))
# Boxplot examples: bill length by species
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_boxplot(aes(fill = species)) +
scale_fill_manual(values = c("orange","orchid","cyan3"))
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) +
geom_boxplot(aes(fill = species), outlier.shape = NA, na.rm = TRUE) +
geom_jitter(aes(color = species),
width = 0.1,
alpha = 0.7, na.rm = TRUE,
show.legend = FALSE) +
scale_color_manual(values = c("darkorange2","darkorchid","cyan4")) +
scale_fill_manual(values = c("orange","orchid","cyan3"))
# Histogram example: flipper length by species
ggplot(data = penguins, aes(x = flipper_length_mm)) +
geom_histogram(aes(fill = species), alpha = 0.5, position = "identity", na.rm = TRUE) +
scale_fill_manual(values = c("darkorange","darkorchid","cyan4"))
#tools project option
data()
setwd("~/GitHub/michaelavance")
